
-consider #f8fafb background color. very similar but a hint of blue.
Another color scheme: https://material.io/color/#!/?view.left=0&view.right=0&primary.color=F5F5F5&secondary.color=29B6F6
-Here is a grey font color to test: #6b7c93.

-What to do about slider focus. Right now webkit does nothing, moz has the checkered border (I believe you have to put a transparent border over this to get rid of this and that outline: none; doesn't do anything), and who knows what ms does.
-Convert back to hex from rgba if I'm not using alpha channel.
-Better name things in weatherrangeinput (specifically inner/outer container).

-Right now the width of the div that gets changed could be a very long decimal in some cases. Should I truncate or round to a certain decimal place.
-Decide about overlaying tick marks and/or values.
-Be sure to check on IE. I think there are some quarks there I'll need to deal with (around thumb needing to be equal or smaller to track, but which I think can be fixed with a transparent border on the track). Also, I question why the heigh is set twice to the ms thumb and to different heights.
-There are several sections where things like border are set but all values are 0. This was probably just from the slider builder. Can I just change it to none (probably don't want to omit entirely because of default browser styling).
-I think I fixed issue on webkit where thumb protrudes a bit too much up top. However, I'm not sure of cause and it occurred to me that it could be related to the retina screen scaling. In that case, check on a regular screen to make sure it doesn't recur there because the fix might cause problems there.
-Make my best guess for ms settings. Right now I have stuff that I know must be wrong.


-On search page I'm not sure how I have the widths of things set up and if that could cause a problem if different fonts are used or different font sizes are used. Check this out.
-Singular metroarea and citylocation pages (these are never linked to but still exist make sure they are styled properly, right now I've only done things with multiple results).
-Don't forget that there are 3 possible scenarios for the metro area section in supplementary information: none, 1, multiple. Multiple is easy to forget so make sure I remember to style.
-Decide what to put on home page.
-Add an about page to explain things more in depth, maybe an about me page too.
-Make sure that I have proper padding on the sides for the desktop styling. Look at layout through range of widths to make sure things are ok (esp. look at search in 700-800 range.)
-Add mobile styling.
-Once basic styling is set up, go through and make sure pages line up with one another in terms of things like margins, padding, etc. I tried to keep things the same, but I'm sure I missed a few things.
-Clean up/document css in general.
-Check site in fallback fonts (like Arial)
-Check on all browsers, esp. ie, and on windows computers and lower screen resolution computers.
-Make a favicon.
-Make note about isActive. I'm using it sparsley but make sure I have write up of ways it might be used in the future.
-Add to github?
-Purchase domain name?




TO DO NOW (IMPORTANT)

WEATHER.JSON STUFF:
-I'm now as confident as I can be about the weather.json data. The things to still do are eliminated unused sections, decide about non us states, and make sure I have min and max values correct (what should be rounded up/down). Everything else is as good as it can be without starting over from scratch.

GRAPH:
-Figure out how I want to size things/if it should dynamically resize or not (I'm leaning towards no)/if I should change aspect ratio I have/if I can make more space on y axis, etc.


OTHER:

-General performance issues. Feels snappy to me, but computer literally feels hot sometimes and not sure if that's something I'm doing (noticed more after adding graphs). Check this out. Also, size of webpack bundle.
-I think I'm adding my li keys in the wrong place in some areas. Double check.
-Need to figure out exactly how I want to use isClicked. Specifically, I have components (location, citylocations, and metroarea) that should work differently depending on isClicked's status. Also, I've gone through to try and make sure that no component currently is assuming one status or another without that assumption being hard coded in and both possibilities dealt with, but go through again and make sure this is the case.
-I really need to figure out how I'm ultimately going to deploy this. Things like 404s and browser/hashHistory will really depend on deployment choices and can't be decided in isolation.
-I've tried to use decodeURIComponent() everywhere (even when I shouldn't be needed) but go through and make sure I haven't missed any places.
-Are there any security issue I need to be aware of when grabbing from url params/query params? I'm thinking primarily of sanitization to avoid JS somehow being passed in and executed. Not having a server/db makes me safe, but I guess the concern would be malicious JS put into a link that was then shared. I'd be fine, but not the people who clicked on the link. Look into this.
-I should go through and make sure my comments are still good. I've changed a lot since they were written.
-Ways to make weather.json smaller: I think there are some things in there I'm not using. Take a look (maybe sharedarea or area?). Also, I could do something where I group types of data together in an array like snow: [1, 3, 4] where each element is a type of snow data. It's a bit less friendly, but could free up some space. Finally, probably go through and remove stations not in the 50 states (and what about water stations if they exist).
-Be sure to note something about how different stations have different numbers of years on record, and more generally about putting the data into context (Useful if you aren't overly exact about things).
-Make sure to remove default favicon and replace with something else.
-Any url not beginning with home/#/ will be redirected to home. However, the entered url itself doesn't change, it just gets a #/ added to it. For example, entering home/search will bring up home redirect to home and have a url of home/search#/. Then, supposed you enter some values and get redirected to results. This results in home/search#/results. Everything works, but it is obviously confusing to look at. See if there's a way to fix this.



MAYBE TO DO IN FUTURE (WOULD BE GOOD BUT NOT CRITICAL)

-Right now you can put logically impossible values in to the range slider (ex: at least 10 and at most 1). This doesn't crash anything (just gives no matches), but should I make impossible or warn?
-I'm tempted to ignore this because I'm unlikely to ever do something this way again, but almost all (but not all) components seem to be rendering twice on load. There isn't any obvious performance issue, I just wish this wasn't happening or at least understood why it is happening. Perhaps related my use of clone element for children of App?
-Better style some of the error pages. Everything works right now but it is mostly plain unstyled text.
-Should the li in CitiesList be ol instead of ul?
-componentWillMount and componentWillReceiveProps are exactly the same except for one using this.props and the other nextProps. I'm fine with this for now, but maybe extract into a shared function in the future.
-In componentWillMount and componentWillReceiveProps I have two functions that take props/nextProps. One takes everything, the other takes .location.query. Both only use .location.query. I'm passing in what the functions expect, and everything works, but should probably just have everything set up to use .location.query because that's what's being used and it's much more clear.
-There are several places where I do something like passing this.props when really I don't need everything. I do this because it's cleaner/simpler, but I should probably only pass what I need. Also, could the spread operator be used here?
-I added a link to the home page using <Link to="/">. This works fine, but should I use Navlink or maybe a named home link?
-Should my weatherOptions const be capitalized? What about all consts?
-Ideally I should change how I handle partial valid url query params. Right now, I fill in the gaps with default values and appropriately update state as needed, but I leave the incomplete url unchanged. The problem here is that if React ever needs to run componentWillReceiveProps, then the whole process of needing to fill in the gaps and compare to state will need to happen again. Everything will ultimately still work, but it would be nice if this could be avoided. So, perhaps find a way to alter url when I fill in gaps?
-Do I need a json loader? What I'm doing (require) seems to be working fine, but I've seen references to needing one with webpack (version 1, not version 2, but I think create-react-app uses v.1 right now). Lots of stuff is hidden with create-react-app, so maybe some sort of loader is already included? Also, I've seen suggestions that it's better to load with webpack. Not 100% sure why, but worth looking in to. Keep all this in mind if anything weird starts happening/figure out why webpack might be a better solution.
-In the app header one of the options is always "New Search". Does it make sense for this to show up on the search page?



GENERAL
-LOOK INTO SYNTAX HIGHLIGHTING FOR REACT, ESP FOR JSX
-Get at least a basic understanding of some of the things going on under the hood in create-react-app (like webpack).
-I'm ok with css in react for this project, but play around with things like css in js and css modules for the future.
-Is there any practical/performance difference between defining a constant inside vs. outside a function?
-Is normalize.css still a thing? Should I use it? Is it already included somehow? Is there a better alternative or something that can be done using post.css?



NOTES

-I was having a problem where when clicking the submit button on the search page the results page was loading from the bottom or middle of the page. The solution I found was to add onUpdate={() => window.scrollTo(0, 0)} to the <Router> component. This worked and I haven't run accross any issues yet, but keep this in mind if I do. Solution suggested at:
https://stackoverflow.com/questions/36904185/react-router-scroll-to-top-on-every-transition and
https://stackoverflow.com/questions/34345722/enforcing-scrolltotop-behavior-using-react-router
-I went to Google's Material Design color picking site and picked a set of colors. I didn't spend too much time on it, but just did something to get me started. That said, it looks decent, and I think the site might be useful in the future. I can get my colors and examples at: https://material.io/color/#!/?view.left=0&view.right=0&primary.color=039BE5&secondary.color=9e9e9e
-I was running in to an odd bug on chrome where some sliders where rendering in a different height than others. I was able to fix this by changing the track height from 2.8 to 3. Maybe the pixels were the problem? Keep in mind if something weird like this happens again.
-Might look in to Lodash function memoization. Lodash looks interesting in general, but the memoization could be a better way to handle the "cacheing" I do with state.
-Not using this, but saving as a reminder. It is a way to find out if query params are the same as the default state values. I thought hard on how to make this, and I'm happy with the result (and could make even more concise w/ann anonymous fat arrow function):
  Object.keys(weatherOptions).every(function(element) {
    return nextProps.location.query[element] === weatherConts[element][2];
  });
-On the search page I used to calculate matches and update state and then use hashHistory push to get to the results page. When watching when things get fired on the results page I saw that state had to be recalculated from the query params. If the state had been updated then the query params should have matched. This suggests that the link to the new page was being processed before state had been updated? I never saw anything visible, but thought it was kind of weird and don't know what might happen on slow machines. My theory is possible because I beleive that setState doesn't always get called immediately. Anyway, an easy fix was to just link to results with the correct query params and let the state get set there. I'm just noting this for future reference.
-One the search page the slider default values start out as numbers, but as soon as they move they become strings. I could use something like parseInt to keep them as numbers, but this would get called a ton and not sure it's needed. The values just get added to a url, where they are strings anyway. So, I think this is fine as is, but noting in case I run in to issues anywhere.
-Note on why no query params for home/search: I'm not going to add query params to the home/search link. If someone bookmarked the home site it would almost certainly be to remember/share the page in general, not to remember the particular search params on the range sliders at the time. In fact, having the slider be anything but the default would probably be confusing. Plus, if they are navigating to search/home page from elsewhere on the site, their current state will already be reflected in the sliders. MY ONLY QUESTION is if this could have any effect on the ability to navigate backwards (url recreating state seems to help with back navigation). I Think its ok, but watch for this.
-I have been following this convention: where there are multiple possible stations that match for a city, I will always return the first one in the array that matches. When there are no matches, I will always link to the first in the array. And when there are some that match and some that don't match, I will alway return the first that is a match. This should ensure consistent results when navigating the site (avoids something like linking to one LA station from results page and a different one when you click on LA from the metro areas page).
-I removed matches from props passed to CityList because I don't think that they where being used anywhere, but add them back if that causes a problem.



ERROR CHECKING NOTES (a bit old, already done, but keeping for reference):
-Three types of issues to check for: 1) invalid city/station/state/metro names, 2) valid names that don't match, and (ex: Los Angeles, Ohio), and 3) invalid query params (ex: days below 32 = kdsjflks). Below are my notes of what I need to check where.

APP:
-Make sure all possible query param possibilities can be handled and state updated as needed. (done).

HOME:
-NO url params to worry about. I'm also not using query params for home, so nothing to check (although it would work fine with query params). The way I have it set up isActive will always be false, although it wouldn't hurt anything if it were true. So, nothing to do.

SEARCH:
-No url params and works regardless of query params, so nothing to do.

RESULTS:
-Need to check the status of isActive. If false, then results make no sense and need to give an error message. Otherwise nothing to do. (done)

METROAREA:
-Verify that metro area url param is valid. (done: see if metro area param is in metroMap. If not, it's invalid. Give error message).
-TO DO: isActive (currently doesn't do anything different when active/inactive. No errors either way, but should make it responsive to state).

CITYLOCATIONS:
-Handle invalid city/state url params. (done: checks stationsObj for every station matching both params. Will return an empty array if either are invalid (or if valid but mismatched). So, just check for empty array and give error message).
-TO DO: isActive (currently doesn't do anything different when active/inactive. No errors either way, but should make it responsive to state).

LOCATION:
-Make sure station id is valid. (done: check for stationsObj[station] and return error message if not in stationsObj).
-Make sure that city and state params in url match station id. (done: find city and state for stationsObj[station] and see if the match the url city and state params. Return error message if they don't match.)
-TO DO: isActive (currently doesn't do anything different when active/inactive. No errors either way, but should make it responsive to state).

OTHER:
-Make sure that urls not matching one of the routes returns a "404" page. (done: notfound.js).
