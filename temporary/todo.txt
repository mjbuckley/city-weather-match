*. I changed weather.json so that metro areas now include their state ("Columbus, OH"). This helps to distinguish between different areas of the same name.  Things appear to still be working ok, but double check. Be sure to use this new feature to be sure I actually am distinuishing areas of the same name.
* I added metromap.json which maps the metro areas to their cities to their stations. Will be useful on the metroarea page. Use if to make links.

0. I have been testing param checking in the results component. Once I get this working I need to apply it everywhere.
0. Why does my results component seem to be rendering twice? When I put console.log(this.props.matches) in the render function in logs twice on most loads, once with the previous value and once with the current value. Not sure?
0. Right now my param checks work, but they assume valid params and values for all weather options. Be able to deal with invalid stuff and with partial weather values (say they don't care about precip but all other values present).
0. I made a buildLink function to build links. It works, but should right now I pass it all props. Is there a none verbose way to only pass it some props.  Does it even matter?
0. Get metro area page link to cities working.

0. Deal with spaces in city and meto area names. I think this is mostly done, but double check.
0. Can/should I extract the link building in to a function?
1. On the search page I can probably make the separate range input even handlers into one function.
3. I have a clicked state I'm not currently using. I think it will be useful, but decide and remove if not.
4. I think I have added query params to all pages, but I haven't thought through if I'm adding the correct thing (props passed down from state or something else). After that, start working on function to read the query params and do what needs to be done from there.
6. Should I make a city to station map? Would probably be useful for the metro areas page, and maybe somewhere else.
7. City links on mertro-areas/:metroarea page are still set to fake. See #6 for a fix.
8. Need to add in link (where needed) on station page to city disambiguation page.
7. Might look in to Lodash function memoization. This might be a replacement for what I'm trying to do with looking at query params and deciding if I need to update state. Also, look into Lodash in general.
8. I can probably simplify the way I'm passing props in some places. Instead of explicitly sending things there are probably some better ways (spread operator?).


NOTES

1. Do I need a json loader? What I'm doing (require) seems to be working fine, but I've seen references to needing one with webpack (version 1, not version 2, but I think create-react-app uses v.1 right now). Lots of stuff is hidden with create-react-app, so maybe some sort of loader is already included? Also, I've seen suggestions that it's better to load with webpack. Not 100% sure why, but worth looking in to. Keep all this in mind if anything weird starts happening/figure out why webpack might be a better solution.
2. Washington DC looks like it has been mapped to Maryland. Manually correct?
3. Be sure to note something about how different stations have different numbers of years on record, and more generally about putting the data into context (Useful if you aren't overly exact about things).


TODO 2/7/17

1. So far I have no check on the parameter. What happens if gibberish gets passed in? What if the parameters are incomplete? Not yet sure where the best place to check is or where to return the error. One spot is in the checkParams function. Another spot might be the updateWeatherState function in App.
2. Where do I still need to add the checkParams function? Does it need to be everywhere?
3. In the Results component I pass a string as an argument in a buildLink function. I think this is ok, but double check.
4. Render function in class vs just return in function. Why?
5. Be sure that I'm correctly passing around weather values (that is, I always treat them as numbers and not strings).
6. I have been following this convention, but I should note it somewhere: Where there are multiple possible stations that match for a city, I will always return the first one in the array that matches. When there are no matches, I will always link to the first in the array. And when there are some that match and some that don't match, I will alway return the first that is a match. This should ensure consistent results when navigating the site (avoids something like linking to one LA station from results page and a different one when you click on LA from the metro areas page).
7. I should make the names of weather values in weather.json/minmax.json the same as the names as I use in the app. For example, right now in the app code I use maxTemp but in weather.json I use "mlyTMaxAvg". As this gets larger this will become confusing. The two main places where I think this is most relevent are in checkparams.js and findmatches.js. In checkparams I currently have an object that maps between terms, but that's a bad way to deal with things. FIX THIS.
8. I think I've made sure weather values are treated as integers and not strings, but go through an make sure that I've done everything properly. Also be explicit about which functions are expecting ints and where the string int conversion needs to happen in the future.
9. I think I'm properly adding query params to all links (but double check), but I'm only interpreting the params on the results page. Add checkParams everywhere.
NOTE: I'm not going to add query params to the home/search link. If someone bookmarked the home site it would almost certainly be to remember/share the page in general, not to remember the particular search params on the range sliders at the time. In fact, having the slider be anything but the default would probably be confusing. Plus, if they are navigating to search/home page from elsewhere on the site, their current state will already be reflected in the sliders. MY ONLY QUESTION is if this could have any effect on the ability to navigate backwards (url recreating state seems to help with back navigation). I Think its ok, but watch for this.
10. I added a link to the home page using <Link to="/">. This works fine, but should I use Navlink or maybe a named home link?


NOTES on checkparams.js

-Break up the function into smaller pieces.
-QUESTION: I pass in props, but aren't props already available here? Any reason to do this?
-TO DO. Extract the helper values that I create. Some of them can probably be removed all together with some renaming of vlaues.


2/22 note:

-In checkparams I call props.updateWeatherState.js. Sometimes the value I pass to checkparams is the current props, sometimes it is nextProps. It seems to work in both cases, but are there any places where nextProps might cause a problem?
-I if a query param is missing when expected, I just replace it with the min/max value. In general this makes sense, but consider doing something different if all query params are missing (because this will return every city). Also, maybe have some sort of check to see if a value is the min max value and can just skip checking stations for that value (to speed things up)?


2/24 Note:

-I've converted MetroArea back to a component and implemented the param lifecycle components. I had to fix checkparamschange.js because there was an infinite loop. It was calling checkparams whenever the query param length was zero. This would update state which would cause checkparamschange to run, and of course its length would still be zero, so this went on forever. Instead I now just compare whether this.props.queryvalue === nextProps.queryvalue. This is what I originally had but wasn't sure how JS handled non-existent property values. I'm still not positive, but this seems to be working ok. Still, look into this and make sure what I have is good. Also, erase old commented out code once I'm certain.
